{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "CH05QsS6E9gq"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def is_prime(num):\n",
        "    if num < 2:\n",
        "        return False\n",
        "    for i in range(2,int(num ** 0.5) + 1):\n",
        "        if num % i == 0:\n",
        "            return True  # Corrected indentation level for else block\n",
        "    else: # Corrected indentation to align with the for loop\n",
        "        return False"
      ],
      "metadata": {
        "id": "I8FZID8aCoZL"
      },
      "execution_count": 80,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Product numbers\n",
        "def is_product(num):\n",
        "   for i in range(5,3):\n",
        "     if num % i == 0:\n",
        "          return False\n",
        "     else:\n",
        "              return True"
      ],
      "metadata": {
        "id": "Kpnamq9RFiSl"
      },
      "execution_count": 86,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Even numbers\n",
        "def is_even(num):\n",
        "    if num % 2 == 0:\n",
        "        return True\n",
        "    else:\n",
        "        return False"
      ],
      "metadata": {
        "id": "ZfISoy3V0xya"
      },
      "execution_count": 60,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#odd numbers\n",
        "def is_odd(num):\n",
        "    if num % 2 != 0:\n",
        "        return True\n",
        "    else:\n",
        "           return False"
      ],
      "metadata": {
        "id": "ShWa0kaZ1nnt"
      },
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Word counter\n",
        "input_text = input(\"Enter a text: \")\n",
        "def count_words(text):\n",
        "  \"\"\"Counts the number of words in a given text.\n",
        "\n",
        "  Args:\n",
        "    text: The input text string.\n",
        "\n",
        "  Returns:\n",
        "    The number of words in the text.\n",
        "  \"\"\"\n",
        "  words = text.split()\n",
        "  return len(words)\n",
        "\n",
        "word_count = count_words(input_text)\n",
        "print(f\"The number of words in the text is: {word_count}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iHyOW4c249EC",
        "outputId": "c3f276b3-2f9b-4d42-a4a8-419cc118a38a"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a text: \"This is a sample text.\"\n",
            "The number of words in the text is: 5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#function which return reverse of a string\n"
      ],
      "metadata": {
        "id": "AxI1BqnY6eVN"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def isPalindrome(s):\n",
        "     s = s.upper()\n",
        "     return s == s[::-1]\n"
      ],
      "metadata": {
        "id": "YK2-xjQJ8Sib"
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Driver code\n",
        "s = \"Hyderabad\"\n",
        "ans = isPalindrome(s)\n",
        "if ans:\n",
        "    print(\"True\")\n",
        "else:\n",
        "    print(\"False\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2JGOwlga8hT_",
        "outputId": "5c69e243-2427-4bef-fd3f-71cde66adf26"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def isPalindrome(s):\n",
        "    s = s.lower()\n",
        "    return s == s[::-1]"
      ],
      "metadata": {
        "id": "6hr85wCP_aer"
      },
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Driver code\n",
        "s = \"Malayalam\"\n",
        "ans = isPalindrome(s) # Assuming isPalindrome is defined elsewhere\n",
        "if (ans):\n",
        "    print(\"True\")\n",
        "else:\n",
        "     print(\"False\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dbsJwjAh9Md9",
        "outputId": "1a480139-f59a-4e91-a0d7-4b088f1927c4"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "rpy0a6-I-tNO"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
